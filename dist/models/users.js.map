{"version":3,"sources":["../../Finance_api/models/users.js"],"names":["Schema","mongoose","userSchema","name","type","String","required","email","unique","password","timestamps","pre","next","user","SALT_FACTOR","isModified","bcrypt","genSalt","err","salt","hash","methods","comparePassword","candidatePassword","cb","compare","isMatch","module","exports","model"],"mappings":";;;;AAAA;;AACA;;AACA,IAAMA,MAAM,GAAGC,qBAASD,MAAxB;AACA,IAAME,UAAU,GAAG,IAAIF,MAAJ,CAAW;AAC5BG,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE;AAFN,GADsB;AAK5BC,EAAAA,KAAK,EAAE;AACLH,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,IAFL;AAGLE,IAAAA,MAAM,EAAE;AAHH,GALqB;AAU5BC,EAAAA,QAAQ,EAAE;AACRL,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF;AAVkB,CAAX,EAchB;AACDI,EAAAA,UAAU,EAAE;AADX,CAdgB,CAAnB,C,CAkBA;;AACAR,UAAU,CAACS,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACrC,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,WAAW,GAAG,EAAlB;AAEA,MAAI,CAACD,IAAI,CAACE,UAAL,CAAgB,UAAhB,CAAL,EAAkC,OAAOH,IAAI,EAAX;;AAElCI,2BAAOC,OAAP,CAAeH,WAAf,EAA4B,UAAUI,GAAV,EAAeC,IAAf,EAAqB;AAC7C,QAAID,GAAJ,EAAS,OAAON,IAAI,CAACM,GAAD,CAAX;;AAETF,6BAAOI,IAAP,CAAYP,IAAI,CAACJ,QAAjB,EAA2BU,IAA3B,EAAiC,IAAjC,EAAuC,UAAUD,GAAV,EAAeE,IAAf,EAAqB;AACxD,UAAIF,GAAJ,EAAS,OAAON,IAAI,CAACM,GAAD,CAAX;AACTL,MAAAA,IAAI,CAACJ,QAAL,GAAgBW,IAAhB;AACAR,MAAAA,IAAI;AACP,KAJD;AAKH,GARD;AASD,CAfD;;AAiBAV,UAAU,CAACmB,OAAX,CAAmBC,eAAnB,GAAqC,UAAUC,iBAAV,EAA6BC,EAA7B,EAAiC;AACpER,2BAAOS,OAAP,CAAeF,iBAAf,EAAkC,KAAKd,QAAvC,EAAiD,UAAUS,GAAV,EAAeQ,OAAf,EAAwB;AACrE,QAAIR,GAAJ,EAAS,OAAOM,EAAE,CAACN,GAAD,CAAT;AACTM,IAAAA,EAAE,CAAC,IAAD,EAAOE,OAAP,CAAF;AACH,GAHD;AAID,CALD;;AAOAC,MAAM,CAACC,OAAP,GAAiB3B,qBAAS4B,KAAT,CAAe,OAAf,EAAwB3B,UAAxB,CAAjB","sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcrypt-nodejs';\r\nconst Schema = mongoose.Schema;\r\nconst userSchema = new Schema({\r\n  name: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true\r\n  },\r\n}, {\r\n  timestamps: true,\r\n});\r\n\r\n//Hash password with bcrypt before saving\r\nuserSchema.pre('save', function (next) {\r\n  var user = this;\r\n  var SALT_FACTOR = 12;\r\n\r\n  if (!user.isModified('password')) return next();\r\n\r\n  bcrypt.genSalt(SALT_FACTOR, function (err, salt) {\r\n      if (err) return next(err);\r\n\r\n      bcrypt.hash(user.password, salt, null, function (err, hash) {\r\n          if (err) return next(err);\r\n          user.password = hash;\r\n          next();\r\n      });\r\n  });\r\n});\r\n\r\nuserSchema.methods.comparePassword = function (candidatePassword, cb) {\r\n  bcrypt.compare(candidatePassword, this.password, function (err, isMatch) {\r\n      if (err) return cb(err);\r\n      cb(null, isMatch);\r\n  });\r\n};\r\n\r\nmodule.exports = mongoose.model('users', userSchema);\r\n"],"file":"users.js"}